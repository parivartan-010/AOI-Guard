## 🧩 1. SYSTEM ARCHITECTURE DIAGRAM

*(High-level structure: Frontend ↔ Backend ↔ Detection Engine ↔ Database & Cloud)*

```
                    ┌──────────────────────────────┐
                    │       QA / Admin User         │
                    │ (Uploads IC Images / Batches) │
                    └──────────────┬───────────────┘
                                   │
                                   ▼
                 ┌─────────────────────────────────────────┐
                 │          FRONTEND DASHBOARD             │
                 │     (React + Material UI / Next.js)     │
                 │  • Login / Upload / Results View         │
                 │  • Charts / Reports / Alerts             │
                 └──────────────┬───────────────────────────┘
                                │  (REST API Call via Axios)
                                ▼
                 ┌─────────────────────────────────────────┐
                 │              BACKEND SERVER              │
                 │          (FastAPI / Flask)               │
                 │  • Handles image requests                │
                 │  • Routes to Detection Engine            │
                 │  • Communicates with Database            │
                 └──────────────┬───────────────────────────┘
                                │
                 ┌──────────────▼───────────────────────────┐
                 │           DETECTION ENGINE               │
                 │     (Python + OpenCV + YOLOv8 + OCR)     │
                 │  • Image Preprocessing                   │
                 │  • IC Detection (YOLOv8)                 │
                 │  • Text Extraction (Tesseract)           │
                 │  • OEM Comparison (NLP)                  │
                 │  • Authenticity Scoring                  │
                 └──────────────┬───────────────────────────┘
                                │
             ┌──────────────────▼────────────────────────────────┐
             │               DATABASE + CLOUD STORAGE             │
             │          PostgreSQL + AWS S3 / Firebase            │
             │  • OEM Reference Data                              │
             │  • Inspection Results & Logs                       │
             │  • Image Storage                                   │
             └───────────────────────────────────────────────────┘
```

---

## 👤 2. USER FLOW DIAGRAM

*(Step-by-step process from user action to final output)*

```
QA Operator / Admin
        │
        ▼
[Login to Web Dashboard]
        │
        ▼
[Upload IC Images or Batch]
        │
        ▼
[Backend API Request]
        │
        ▼
[Image sent to Detection Engine]
        │
        ▼
[YOLOv8 detects IC marking region]
        │
        ▼
[Tesseract OCR extracts marking text]
        │
        ▼
[Compare marking with OEM reference]
        │
        ▼
[Authenticity Scoring (ML Model)]
        │
        ▼
[Verdict generated: Genuine / Fake / Suspicious]
        │
        ▼
[Result stored in DB + AWS S3]
        │
        ▼
[Result displayed on Dashboard]
        │
        ▼
[Optional: Alerts / Manual Review / Model Feedback]
```

---

## 🔄 3. DATA FLOW DIAGRAM (DFD – LEVEL 1)

*(Shows how data moves through each component)*

```
               ┌──────────────────────┐
               │   User (QA Staff)   │
               └───────┬─────────────┘
                       │ Upload Image
                       ▼
         ┌─────────────────────────────────┐
         │     Frontend (React Website)     │
         └──────────┬──────────────────────┘
                    │ API Request
                    ▼
         ┌─────────────────────────────────┐
         │     Backend Server (FastAPI)     │
         │  - Receives Image                │
         │  - Stores temp in S3             │
         │  - Triggers Detection Module     │
         └──────────┬──────────────────────┘
                    │
                    ▼
         ┌─────────────────────────────────┐
         │   Detection Engine (Python)      │
         │  - OpenCV / YOLOv8 / OCR         │
         │  - Text Extraction + NLP         │
         │  - Authenticity Scoring          │
         └──────────┬──────────────────────┘
                    │
          ┌─────────▼─────────┐
          │ Compare with OEM  │
          │  DB + Web Scraper │
          └─────────┬─────────┘
                    │ Result
                    ▼
        ┌──────────────────────────────────┐
        │ PostgreSQL + AWS S3 (Storage)     │
        │ - Logs, Images, Reports, Scores   │
        └───────────┬───────────────────────┘
                    │
                    ▼
        ┌──────────────────────────────────┐
        │ Frontend Dashboard (React)        │
        │ - Displays Verdict + Charts       │
        │ - Allows Download / Feedback      │
        └──────────────────────────────────┘
```

---

## 🧠 4. MODULE INTERACTION DIAGRAM

*(Internal logic of backend components)*

```
┌──────────────────────────────────────────────┐
│                Backend Server                │
│──────────────────────────────────────────────│
│ 1. receive_image() → validate format          │
│ 2. store_temp_in_s3()                         │
│ 3. call_detection_engine()                    │
│ 4. get_result() → call_oem_compare()          │
│ 5. compute_score()                            │
│ 6. log_result_to_db()                         │
│ 7. return_response_to_frontend()              │
└──────────────────────────────────────────────┘

         │
         ▼

┌───────────────────────────────┐
│    Detection Engine Module    │
│───────────────────────────────│
│ - preprocess_image()          │
│ - detect_ic_region()          │
│ - extract_text_ocr()          │
│ - parse_text_nlp()            │
│ - send_to_comparison_module() │
└───────────────────────────────┘

         │
         ▼

┌───────────────────────────────┐
│     OEM Comparison Module     │
│───────────────────────────────│
│ - fetch_local_reference()     │
│ - auto_scrape_if_missing()    │
│ - compare_sequence()          │
│ - generate_authenticity_score()│
│ - return_verdict()            │
└───────────────────────────────┘
```

---

## ☁️ 5. DEPLOYMENT DIAGRAM

*(Where everything runs — local/cloud setup)*

```
                      ┌────────────────────────────┐
                      │     Frontend (Next.js)     │
                      │  Deployed on → Vercel      │
                      └──────────────┬─────────────┘
                                     │ HTTPS API
                                     ▼
                      ┌────────────────────────────┐
                      │  Backend (FastAPI Server)  │
                      │  Hosted on → Render / EC2   │
                      │  Communicates with:         │
                      │   - Detection Engine        │
                      │   - PostgreSQL Database     │
                      │   - AWS S3 Storage          │
                      └──────────────┬─────────────┘
                                     │
             ┌───────────────────────┼────────────────────────┐
             │                       │                        │
             ▼                       ▼                        ▼
┌────────────────────┐   ┌────────────────────┐   ┌────────────────────┐
│ Detection Engine   │   │ PostgreSQL DB      │   │ AWS S3 (Images)    │
│ (YOLO + OCR + ML)  │   │ (Results + Logs)   │   │ (IC Images, Reports)│
│ Local/Cloud GPU VM │   │ Cloud Instance     │   │ Secure Storage      │
└────────────────────┘   └────────────────────┘   └────────────────────┘
```

---

## 🧰 6. TECH STACK OVERVIEW DIAGRAM

```
┌────────────────────────────────────────────────────────────┐
│                        TECH STACK                          │
│────────────────────────────────────────────────────────────│
│  FRONTEND:  React.js, Material UI, Next.js, Axios           │
│  BACKEND:   Python, FastAPI, Flask, REST APIs               │
│  DETECTION: OpenCV, YOLOv8, Tesseract OCR, NLP (spaCy)     │
│  DATABASE:  PostgreSQL (Structured data)                    │
│  STORAGE:   AWS S3 (Images, Logs)                           │
│  AUTO-FETCH: BeautifulSoup / Scrapy (OEM Scraper)           │
│  ML MODULES: Scikit-learn, TensorFlow (Authenticity Model)  │
│  CLOUD DEPLOYMENT: Render / AWS EC2 / Vercel                │
│  AUTHENTICATION: JWT / Firebase Auth                        │
│  ALERTS: SMTP / Twilio / Email Integration                  │
└────────────────────────────────────────────────────────────┘
```

